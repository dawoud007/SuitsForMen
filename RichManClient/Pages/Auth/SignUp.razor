@page "/signup"
@inject HttpClient Http
@inject AuthService AuthService
<style>
    /* Add your custom styles here */
    h3 {
        font-size: 28px;
        margin-bottom: 20px;
        color: #11d;
      }

      .parent {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
        background-color: #f5f5f5; /* Adding a light background color */
      }

      .container {
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        align-items: center;
        background-color: white;
        width: 350px;
      }

    .form-group {
        margin-bottom: 15px; /* Add some space between form groups */
    }

    .form-group label {
        display: block; /* Labels are now block-level elements */
        color: #22a;
        font-weight: bold;
        margin-bottom: 5px; /* Adding space below labels */
      }

   .form-control {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%; /* Full-width input fields */
    }

     .signup-button {
        background-color: #11d;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 20px;
        font-weight: bold;
        transition: background-color 0.3s ease;
      }

      .signup-button:hover {
        background-color: #071952; /* Slightly darker color on hover */
        color: white;
      }

   /* Message styles */
      .success-message,
      .error-message {
        margin-top: 10px;
        text-align: center;
        font-size: 14px;
      }

</style>

<div class="parent">
    <div class="container">
        <h3>Sign Up</h3>
        <div class="form-group">
            <label for="username">اسم المستخدم</label>
            <input type="text" id="username" @bind="model.UserName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="password">كلمة المرور</label>
            <input type="password" id="password" @bind="model.Password" class="form-control" />
        </div>
        <div class="form-group">
            <label for="role">المنصب</label>
            <input type="text" id="role" @bind="model.Role" class="form-control" />
        </div>
        <div class="form-group">
            <label for="whatToSee">اسم المحل</label>
            <input type="text" id="whatToSee" @bind="model.WhatToSee" class="form-control" />
        </div>
        <button @onclick="SignupUser" class="signup-button">تسجيل مستخدم</button>
    </div>
</div>

<!-- Success and error messages -->
@if (isRegistered)
{
    <div class="success-message">
        User registered successfully!
    </div>
}
@if (isError)
{
    <div class="error-message">
        @errorMessage
    </div>
}


@code {
    public class SignUpModel
    {
        public string? UserName { get; set; }
        public string? Password { get; set; }
        public string? Role { get; set; }
        public string? WhatToSee { get; set; }
    }
    private SignUpModel model = new SignUpModel();
    private bool isRegistered = false; // Flag to show success message
    private bool isError = false; // Flag to show error message
    private string errorMessage = ""; // Error message text

    private async Task SignupUser()
    {
        var token = await AuthService.GetAccessTokenAsync();

        // Set the authorization header for the HttpClient
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        // Make the API call
        var response = await Http.PostAsJsonAsync(sharedStateService.Api_Uri + "Shop/AddShopToRichMan", model);

        // Handle the response
        if (response.IsSuccessStatusCode)
        {
            isRegistered = true;
            isError = false;
            model = new SignUpModel();
        }
        else
        {
            isError = true;
            var errorMessageResponse = await response.Content.ReadAsStringAsync();
            errorMessage = errorMessageResponse;
        }
    }
}

