@page "/search"

@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components
@using System.Text;
@inject HttpClient Http

<PageTitle>بحث</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h3 class="text-center mb-4">ابحث عن القطعة</h3>
            <form class="form-wrapper">
                <div class="form-group">
                    <label for="nameInput" class="form-label">الاسم</label>
                    <input type="text" class="form-control" id="nameInput" @bind="searchCriteria.Name" />
                </div>
                <div class="form-group">
                    <label for="sizeInput" class="form-label">المقاس</label>
                    <input type="number" class="form-control" id="sizeInput" @bind="searchCriteria.Size" />
                </div>
                <div class="form-group">
                    <label for="colorInput" class="form-label">اللون</label>
                    <input type="text" class="form-control" id="colorInput" @bind="searchCriteria.Color" />
                </div>
                <div class="form-group">
                    <label for="makeInput" class="form-label">الماركة</label>
                    <input type="text" class="form-control" id="makeInput" @bind="searchCriteria.Make" />
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary btn-search" @onclick="Search">بحث</button>
                </div>
            </form>
        </div>
    </div>

    <div class="row mt-5 justify-content-center">
        <div class="col-md-8">
            @if (cloths == null)
            {
                <p class="text-center"><em>...تحميل</em></p>
            }
            else if (cloths.Count == 0)
            {
                <p class="text-center" style="color: red;">لا يوجد قطع مماثلة</p>
            }
            else
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th >الاسم</th>
                            <th >اللون</th>
                            <th >المقاس</th>
                            <th >الماركة</th>
                            <th >عدد القطع</th>
                            <th >المحل</th>

                         
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cloth in cloths)
                        {
                            @if (cloth.BillId == null)
                            {

                                <tr>
                                    <td>@cloth.Name</td>
                                    <td>@cloth.Color</td>
                                    <td>@cloth.Size</td>
                                    <td>@cloth.type</td>
                                    <td>@cloth.NumOfPieces</td>
                                    <td>@cloth.StoreName</td>
                                
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<style>
      /* Custom CSS for styling */
      .btn-search {
        background-color: #11d;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 15px;
        font-weight: bold;
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      .btn-search:hover {
        background-color: #071952; /* Slightly darker color on hover */
      }
      .form-wrapper {
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
      }

      /* Adjust the form inputs' styles */
      .form-control {
        border-color: black;
        border-width: 2px;
      }

      /* Set a custom width for the form */
      .col-md-6 {
        max-width: 400px;
      }

      th {
        color: #11d;
      }
      /* Add some space between the table and the form */
      .mt-5 {
        margin-top: 30px;
      }

      h3,
      h4 {
        font-size: 2rem;
        font-weight: 600;
        color: #000;
      }
    </style>
@code {
    private ClothSearchDto searchCriteria = new ClothSearchDto();
    private List<Cloth> cloths;
  
    private async Task Search()
    {
        using var httpClient = new HttpClient();

        // Serialize the searchCriteria object into JSON
        var json = JsonSerializer.Serialize(searchCriteria);

        // Create the HttpContent from the JSON string
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var token = await AuthService.GetAccessTokenAsync();

        // Set the authorization header for the HttpClient
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        // Make the POST request with the JSON content in the request body
        var response = await Http.PostAsync(sharedStateService.Api_Uri + "Cloth/Search", content);

        if (response.IsSuccessStatusCode)
        {
            // Deserialize the response content into a list of Cloth objects
            cloths = await response.Content.ReadFromJsonAsync<List<Cloth>>();
        }
        else
        {
            // Handle the error scenario here
        }
    }
}

@code {
    public class Cloth
    {
        public string? Name { get; set; }
        public string? Color { get; set; }
        public int Size { get; set; }
        public string? type { get; set; }
        public Guid? BillId { get; set; }
        public int? NumOfPieces { get; set; }
        public string? StoreName { get; set; }
    }

    public class ClothSearchDto
    {
        public string? Name { get; set; }
        public int? Size { get; set; }
        public string? Color { get; set; }
        public string? Make { get; set; }
    }
}
