@inherits LayoutComponentBase
@inject IAuthenticationService AuthenticationService

<div class="page">
    @if (AuthenticationService.IsLoggedIn)
    {
        <!-- Display NavMenu and other navigation links for logged-in users -->
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4" style="display: flex; justify-content: right;">
                <a href="/logout" style="background-color: blue; color: white; padding: 5px; text-decoration: none; margin-right: 10px; border-radius: 5px;">تسجيل خروج</a>
               
                
                <a href="/signup" style="background-color: red; color: white; padding: 5px; text-decoration: none; margin-left: 10px; border-radius: 5px;">اضافة محل </a>

                <!-- Other navigation links for logged-in users -->
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main>
    }
    else
    {
        <!-- Display only the login form when the user is not logged in -->
        <main class="center-content">

            @using ElectronicsShop_service.Dtos
            @inject HttpClient Http
            @inject NavigationManager NavigationManager
            @using Microsoft.JSInterop
            @inject IJSRuntime JSRuntime
            @inject IAuthenticationService AuthenticationService

            <style>
                /* Add your custom styles here */
                h3 {
                    font-size: 28px;
                    margin-bottom: 20px;
                    color: #11d;
                }

                .parent {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    margin: 0;
                    background-color: #f5f5f5; /* Adding a light background color */
                }

                .container {
                    padding: 40px;
                    border-radius: 10px;
                    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    background-color: white;
                    width: 350px;
                }

                .form-group {
                    margin-bottom: 15px; /* Add some space between form groups */
                }

                    .form-group label {
                        display: block; /* Labels are now block-level elements */
                        color: #22a;
                        font-weight: bold;
                        margin-bottom: 5px; /* Adding space below labels */
                    }

                .form-control {
                    padding: 8px;
                    border: 1px solid #ccc;
                    border-radius: 5px;
                    width: 100%; /* Full-width input fields */
                }


                .login-button {
                    background-color: #11d;
                    color: white;
                    padding: 10px 20px;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                    margin-top: 20px;
                    font-weight: bold;
                    transition: background-color 0.3s ease, color 0.3s ease;
                }

                    .login-button:hover {
                        background-color: #0a0a8b; /* Slightly darker color on hover */
                        color: white;
                    }


                /* Message styles */
                .success-message,
                .error-message {
                    margin-top: 10px;
                    text-align: center;
                    font-size: 14px;
                }

            </style>

            <div class="parent">
                <div class="container">
                    <h3>Login</h3>
                    <div class="form-group">
                        <label for="username">اسم المستخدم</label>
                        <input type="text" id="username" @bind="model.Username" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="password">كلمة المرور</label>
                        <input type="password" id="password" @bind="model.Password" class="form-control" />
                    </div>
                    <button @onclick="LoginUser" class="login-button">دخول</button>
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="success-message"style="color:green;">
                            @successMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message"style="color:red;">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>

            <!-- Display messages -->
            <!-- Display messages -->
          

            @code {

            public class LoginModel
            {
                public string? Username { get; set; }
                public string? Password { get; set; }
            }

            public class AuthResponse
            {
                public string Token { get; set; }
            }
            string Api_Uri = "http://localhost:5000/";
            private LoginModel model = new LoginModel();
            private string successMessage = string.Empty;
            private string errorMessage = string.Empty;
            private async Task LoginUser()
            {
                var response = await Http.PostAsJsonAsync(Api_Uri + "Auth/login", model);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<AuthResponse>();
                    if (result != null && !string.IsNullOrEmpty(result.Token))
                    {
                        // Save the JWT token in local storage
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", result.Token);
                        await AuthenticationService.Login(result.Token);
                        // Display success message
                        successMessage = "دخول";
                        // Redirect to the dashboard or another authenticated page
                        NavigationManager.NavigateTo("/");
                    }
                }
                else
                {
                    // Handle login failure
                    errorMessage = "تاكد من الاسم وكلمة السر";
                }
            }
        }



    </main>
    }
</div>
